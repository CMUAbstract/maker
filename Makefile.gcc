TOOLCHAIN = gcc

include $(MAKER_ROOT)/Makefile.env
include $(MAKER_ROOT)/Makefile.board

PREFIX = $(TOOLCHAIN_ROOT)/bin/msp430-elf-
CC      = $(PREFIX)gcc
LD      = $(PREFIX)gcc
AS      = $(PREFIX)as
GDB     = $(PREFIX)gdb

include $(MAKER_ROOT)/Makefile.version

LINKER_SCRIPTS_ROOT = $(MAKER_ROOT)/linker-scripts/gcc-$(GCC_VER_MAJ)

LIB_SUFFIX = a
EXEC_SUFFIX = out
include $(MAKER_ROOT)/Makefile.suffix

COMMONFLAGS = \
	-mmcu=$(DEVICE) \

ASFLAGS = \
	$(COMMONFLAGS) \

HWMULT ?= 1

OPT_LEVEL ?= 2

ifeq ($(shell test $(GCC_VER_MAJ) -lt 6; echo $$?),0)
DEVICES_CSV_DIR = include
else # GCC_VER_MAJ >= 6
DEVICES_CSV_DIR = msp430-elf/include
endif # GCC_VER_MAJ

# We override because when this file is included from a nested build directory
# (say, when the app or toolchain has more than one build artifact, each built
# by its own makefile), the CFLAGS are passed via '$(MAKE) -e', with which
# changing the value of a variable is only possible with override. It's ugly,
# but hopefully, this is enough to make things work.

override CFLAGS += \
	$(COMMONFLAGS) \
	-D$(DEVICEDEF) \
	-D$(FAMILYDEF) \
	-O$(OPT_LEVEL) \
	-g \
	-std=c99 \
	-Wall \
	-minrt \
	-I$(TOOLCHAIN_ROOT)/$(DEVICES_CSV_DIR) \
	-I$(SRC_ROOT) \

# To prevent printf() getting replaced with puts from libc instead of from our
# I/O backend lib. Note that we used to rely on overriding puts/putchar symbols,
# but that seems to be fragile. One day it just stopped overriding.
override CFLAGS += -fno-builtin

ifneq ($(HWMULT),1)
override CFLAGS += -mhwmult=none
endif

# NOTE: --gc-sections is important otherwise cruft gets linked in (like,
# open/close/read/etc syscalls from libnosys), which uses errno, which
# prompts newlib to include 'impure_data' (~128 bytes) into .data,
# which leads to a significant delay before main run son startup (~3ms)
# spent on initializing this data. NOTE: --gc-sections only fixes for
# TI GCC v5.00 (gcc 6.2.1), does not fix the issue with v3.00 (v4.9.1).
override LFLAGS += \
	-Wl,--gc-sections \
	-T $(LINKER_SCRIPTS_ROOT)/$(DEVICE).ld \
	-L $(TOOLCHAIN_ROOT)/include \

VPATH = $(SRC_ROOT)

all: $(BIN)

-include $(OBJECTS:.o=.d)

# disable implicit rule that for some reason overrides the chained rules below
#.SUFFIXES:

%.o: %.c
	mkdir -p "./$(shell dirname $@)"
	$(CC) -c -MD $(CFLAGS) $< -o $@

%.o: %.S
	mkdir -p "./$(shell dirname $@)"
	$(AS) $(ASFLAGS) $< -o $@

%.out: $(OBJECTS)
	$(LD) $(LFLAGS) $(OBJECTS) $(LIBS) -o $(BIN)

%.a: $(OBJECTS)
	$(AR) rcs $@ $^

clean:
	rm -f $(OBJECTS) $(OBJECTS:.o=.d) $(BIN)

debug: $(BIN)
	$(GDB) $(BIN)

# disable implicit rules, for personal sanity
.SUFFIXES:

ifeq ($(TARGET_TYPE),exec)
include $(MAKER_ROOT)/Makefile.program
endif

ifeq ($(TARGET_TYPE),exec)
define add-lib
LIBS += -l$(subst lib,,$(1))
override LFLAGS += -L$$(DEP_LIB_DIR_$(1))
endef
else # TARGET_TYPE
define add-lib
# nothing
endef
endif

include $(MAKER_ROOT)/Makefile.dep

# do not remove intermediates
.SECONDARY:
