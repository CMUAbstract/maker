PREFIX = $(CLANG_ROOT)/bin/
export CC_CLANG = $(PREFIX)clang
CC      := $(CC_CLANG)
export LLC     = $(PREFIX)llc
export LLVM_LINK= $(PREFIX)/llvm-link
export LLVM_AS = $(PREFIX)/llvm-as
export LLVM_DIS = $(PREFIX)/llvm-dis
export OPT      = $(PREFIX)/opt

GCC     = $(MSPGCC_ROOT)/bin/msp430-elf-gcc
AS      = $(MSPGCC_ROOT)/bin/msp430-elf-as
#LD      = $(MSPGCC_ROOT)/bin/msp430-elf-ld
LD      = $(GCC)
GDB     = $(MSPGCC_ROOT)/bin/msp430-elf-gdb

include $(MAKER_ROOT)/Makefile.version.gcc
include $(MAKER_ROOT)/Makefile.version.clang

LINKER_SCRIPTS_ROOT = $(MAKER_ROOT)/linker-scripts/gcc-$(GCC_VERSION_MAJOR)

include $(MAKER_ROOT)/Makefile.suffix

# With older Clang, builtins are missing, so link fails with HW multiplier
ifneq ($(call version-lt,$(CLANG_VERSION),5.0.0),)
HWMULT ?= 0
else # clang >= 5.0.0
HWMULT ?= 1
endif # clang version

# We override because when this file is included from a nested build directory
# (say, when the app or toolchain has more than one build artifact, each built
# by its own makefile), the CFLAGS are passed via '$(MAKE) -e', with which
# changing the value of a variable is only possible with override. It's ugly,
# but hopefully, this is enough to make things work.

CFLAGS_TOOLCHAIN += \
	--target=msp430 \
	$(BOARDDEFS) \
	-nobuiltininc \
	-nostdinc++ \
	-isysroot /none \
	-O0 \
	-g \
	-std=c99 \
	-Wall \
	-MD \
	-I $(MSPGCC_ROOT)/lib/gcc/msp430-elf/$(GCC_VERSION)/include \
	-I $(MSPGCC_ROOT)/msp430-elf/include \
	-I $(MSPGCC_ROOT)/include \
	-I $(SRC_ROOT) \

LLC_FLAGS_TOOLCHAIN += \
	-O0 \

LFLAGS_TOOLCHAIN += \
	-Wl,-Map=$(BIN).map \
	-T $(LINKER_SCRIPTS_ROOT)/$(DEVICE).ld \
	-L $(MSPGCC_ROOT)/include \

ifeq ($(HWMULT),1)
LFLAGS_TOOLCHAIN += -mhwmult=auto
else
# The HW multiplier argument has changed in Clang 5.0
ifneq ($(call version-lt,$(CLANG_VERSION),5.0.0),)
LLC_FLAGS_TOOLCHAIN += -msp430-hwmult-mode=no
else # clang >= 5.0.0
LLC_FLAGS_TOOLCHAIN += -mhwmult=none
endif # clang >= 5.0.0
LFLAGS_TOOLCHAIN += -mhwmult=none
endif

# By default, link sources (given as object files), compiled bytecode
LINK_OBJECTS ?= $(OBJECTS:.o=.bc)

VPATH = $(SRC_ROOT)

bin: $(BIN)

-include $(OBJECTS:.o=.d)

# disable implicit rule that for some reason overrides the chained rules below
.SUFFIXES:

# LLVM/Clang compiler and linker part of the pipeline

%.bc: %.c
	mkdir -p "./$(shell dirname $@)"
	$(CC) -emit-llvm -c $(CFLAGS_TOOLCHAIN) $(CFLAGS) $< -o $@

%.a.bc: $(LINK_OBJECTS)
	$(LLVM_LINK) -o $@ $^ $(LLVM_LIBS)

# Disassemble IR bytecode (this is auxiliary, not part of the build pipeline)
%.ll : %.bc
	$(LLVM_DIS) -o $@ $^

# Produce C++ code for constructing the given IR (aux target)
%.ir : %.bc
	$(LLC) -march=cpp -o $@ $^

# Compile LLVM IR into LLVM bytecode (aux target)
%.ll.bc: %.ll
	$(LLVM_AS) -o $@ $^

# View the CFG graph in a .dot program (via xdg-open)
%.bc.cfg: %.bc
	$(OPT) -view-cfg $<

# LLVM bytecode to native assembly

%.s: %.bc
	$(LLC) $(LLC_FLAGS_TOOLCHAIN) $(LLC_FLAGS) $^ -o $@

%.S: %.a.bc
	$(LLC) $(LLC_FLAGS_TOOLCHAIN) $(LLC_FLAGS) $^ -o $@

# Native assembly to native object code

%.out: %.S
	$(GCC) $(LFLAGS_TOOLCHAIN) $(LFLAGS) -o $@ $< $(LIBS)

# Do not remove these intermediates
.PRECIOUS: %.a.bc %.bc %.s %.S

clean:
	rm -f *.o *.bc *.asm *.s *.S *.map *.out *.a *.d *.ll

debug: $(BIN)
	$(GDB) $(BIN)

# disable implicit rules, for personal sanity
.SUFFIXES:

ifeq ($(TARGET_TYPE),exec)
include $(MAKER_ROOT)/Makefile.program
endif

ifeq ($(TARGET_TYPE),exec)
# If toolchain matches, i.e. it is clang, then add to LLVM link line,
# otherwise, add to the GCC link line
define add-lib
LLVM_LIBS += $(if $(filter $(TOOLCHAIN),$(2)),$$(DEP_LIB_DIR_$(1))/$(1).$(call bin-suffix,lib,$(TOOLCHAIN)))
LIBS += $(if $(filter $(TOOLCHAIN),$(2)),,-L$$(DEP_LIB_DIR_$(1)) -l$(subst lib,,$(1)))
endef
else # TARGET_TYPE
define add-lib
# nothing
endef
endif

# Older Clang versions did not have builtins defined
override DEPS_clang += libmspbuiltins:gcc
export CLANG_VERSION # libmspbuiltins build is parametrized by Clang version

include $(MAKER_ROOT)/Makefile.dep

unexport EXEC
unexport OBJECTS
unexport DEPS
unexport DEPS_clang
unexport DEPS_gcc

# do not remove any intermediate artifacts
.SECONDARY:
