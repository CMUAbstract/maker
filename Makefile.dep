# Declare a dependency on a library
#
# This includes the library into the build and creates rules for making the
# library and cleaning it, as well as aggregate rules 'dep' and 'depclean'.
#
# Usage: $(eval $(call depend,libxxx))
#
# The library is expected to be in $(LIB_ROOT).
#
# TODO: It might be worth it to parametrize the path for each library (in
# the dependency declaration), but that's more verbose. It should be
# possible to make the path argument optional.

define depend-rule

$(2)/$(1).a: $(2)
	make -e -C $$^

$(EXEC): $(2)/$(1).a
dep: $(2)/$(1).a

depclean_$(1): $(2)
	make -C $$^ clean
depclean: depclean_$(1)

endef

define depend
DEP_INC_RELDIR_$(1) ?= src/include
DEP_LIB_RELDIR_$(1) ?= bld/gcc

DEP_ROOT_$(1) = $(LIB_ROOT)/$(1)
DEP_INC_$(1) = $$(DEP_ROOT_$(1))/$$(DEP_INC_RELDIR_$(1))
DEP_LIB_DIR_$(1) = $$(DEP_ROOT_$(1))/$$(DEP_LIB_RELDIR_$(1))

CFLAGS += -I$$(DEP_INC_$(1))
LFLAGS += -L$$(DEP_LIB_DIR_$(1))
LIBS += -l$(subst lib,,$(1))

$(call depend-rule,$(1),$$(DEP_LIB_DIR_$(1)))
endef
