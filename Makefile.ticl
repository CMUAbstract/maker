TOOLCHAIN = ticl

include $(MAKER_ROOT)/Makefile.env
include $(MAKER_ROOT)/Makefile.board

LINKER_SCRIPTS_ROOT = $(MAKER_ROOT)/linker-scripts

CG_TOOL_BIN := $(CG_TOOL_ROOT)/bin
AS = $(CG_TOOL_BIN)/cl430
CC = $(CG_TOOL_BIN)/cl430
LD = $(CG_TOOL_BIN)/cl430
HEX = $(CG_TOOL_BIN)/hex430
FLASHER := LD_LIBRARY_PATH=$(FLASHER_ROOT) $(FLASHER_ROOT)/MSP430Flasher

LD_SCRIPT = $(LINKER_SCRIPTS_ROOT)/lnk_$(DEVICE).cmd

LIB_SUFFIX = a
EXEC_SUFFIX = out

include $(MAKER_ROOT)/Makefile.suffix

COMMON_FLAGS = \
	-g \
	-O1 \
	--opt_for_speed=0 \
	--use_hw_mpy=F5 \
	-vmspx \
	--abi=eabi \
	--data_model=small \
	--code_model=small \
	--define=__MSP430FR5969__ \
	--silicon_errata=CPU21 \
	--silicon_errata=CPU22 \
	--silicon_errata=CPU23 \
	--silicon_errata=CPU40 \
	--advice:power="none" \
	--diag_warning=225 \
	--display_error_number \
	--diag_wrap=off \
	#--printf_support=minimal \

override CFLAGS += \
	--preproc_with_compile \
	--include_path="$(CG_TOOL_ROOT)/include" \
	--include_path="$(PLATFORM_ROOT)/include" \
	--include_path="$(SRC_ROOT)" \

ASFLAGS = $(CFLAGS)

override LDFLAGS += \
	--rom_model \
	--heap_size=160 \
	--stack_size=160 \
	--cinit_hold_wdt=on \
	--reread_libs \
	--warn_sections \
	-i"$(CG_TOOL_ROOT)/lib" \
	-i"$(CG_TOOL_ROOT)/include" \
	-i"$(PLATFORM_ROOT)/include" \
	-i"$(PLATFORM_ROOT)/lib/5xx_6xx_FRxx" \

HEXFLAGS = \
	--memwidth=8 \
	--romwidth=8

# Out-of-tree build: place build artifacts (object files) in the build dir
VPATH += $(SRC_ROOT)

# Specify the source files list explicitly avoiding wildcards, in order to make
# sure the build (esp. linker) doesn't pick up stray files

ASM_SRCS = \

#all: $(EXEC).out
$(info $(BIN))
all: $(BIN)

#-include ${C_SRCS:.c=.d} ${ASM_SRCS:.asm=.d}
#-include $(OBJECTS:.o=.d)

%.o: %.asm
	mkdir -p "./$(shell dirname $@)"
	$(AS) $(COMMON_FLAGS) -c $(ASFLAGS) \
		--preproc_dependency="${@:.o=.d}" --asm_directory="$(shell dirname $@)" \
		--output_file="$@" "$<"

%.o: %.c
	mkdir -p "./$(shell dirname $@)"
	$(CC) $(COMMON_FLAGS) -c $(CFLAGS) \
		--preproc_dependency="${@:.obj=.d}" --asm_directory="$(shell dirname $@)" \
		--output_file="$@" "$<"

%.out: $(OBJECTS)
	$(LD) $(COMMON_FLAGS) -z $(LDFLAGS) --output_file="$@" $(OBJECTS) $(LD_SCRIPT) $(LIBS) 
#-l"libchain.a"

#%.out: $(OBJECTS)
#	$(LD) $(COMMON_FLAGS) -z $(LDFLAGS) --output_file="$@" $^ $(LD_SCRIPT)

%.hex: %.out
	$(HEX) $(HEXFLAGS) -i -o "$@" "$<"

$(info "$(OBJECTS)")

#%.o:
#	echo TEST2!!

%.a: $(OBJECTS)
	$(AR) rcs $@ $^

clean:
	rm -f $(BIN) $(OBJECTS) ${OBJECTS:.o=.d}

flash: $(EXEC).hex
	$(FLASHER) -w $< -g -v -z [VCC=3300]
# disable implicit rules, for personal sanity
.SUFFIXES:

ifeq ($(TARGET_TYPE),exec)
include $(MAKER_ROOT)/Makefile.program
endif

ifeq ($(TARGET_TYPE),exec)
define add-lib
LIBS += -l"$(1).$(LIB_SUFFIX)"
override LDFLAGS += -i"$$(DEP_LIB_DIR_$(1))"
endef
else # TARGET_TYPE
define add-lib
# nothing
endef
endif


include $(MAKER_ROOT)/Makefile.dep
.PHONY: clean flash
